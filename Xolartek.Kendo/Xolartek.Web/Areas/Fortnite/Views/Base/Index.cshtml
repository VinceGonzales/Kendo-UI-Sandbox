@using Xolartek.Web.Fortnite.Models
@{
    Layout = "~/Areas/Fortnite/Views/Shared/_Layoutv2013.cshtml";
    ViewBag.Title = "Index";
}
@section header {
<style>
    .row-tactical {
        background-color: aquamarine;
    }
</style>
}
<div class="container">
    <div class="row">
        <div class="col-md-12"><h4>Fortnite</h4></div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @(Html.Kendo().Grid<HeroVM>().Name("Heroes")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.ImgUrl).Title(" ").ClientTemplate(@"<img src='" + @Url.Content("#:data.ImgUrl#") + "' style='width:80px;' />").Width(80);
                        columns.Bound(p => p.Name).Title("Name").Width(80);
                        columns.Bound(p => p.Rarity).Title("Rarity").Width(80);
                        columns.Bound(p => p.Level).Title("Level").Width(80);
                        columns.Bound(p => p.Stars).ClientTemplate("#=StarLabel(data.Stars)#").Width(80);
                    })
                    .HtmlAttributes(new { style = "height: 500px;" })
                    .Sortable()
                    .Selectable(s => s.Mode(GridSelectionMode.Single))
                    .Scrollable(s => s.Height("auto"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Model(model => model.Id(a => a.Id))
                        .Read(read => read.Action("LoadHeroesList", "Base", Model))
                    )
                    .Events(e => e.Change("onGridChange"))
            )
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="pnlGrid"></div>
        </div>
    </div>
</div>
@section scripts {
<script>
var skillDTO = {
    id: { type: "number" },
    name: { type: "string" },
    classname: { type: "string" },
    description: { type: "string" },
    heroname: { type: "string" },
    issupport: { type: "boolean" },
    istactical: { type: "boolean" }
};
var skillModel = kendo.data.Model.define({ id: "Id", fields: skillDTO });

function StarLabel(data) {
    var result = '';
    for(var i=0;i<data;i++) {
        result += "<span class='k-icon k-i-custom'></span>";
    }
    return result;
}
function onGridChange(e) {
    var grid = e.sender;
    var selected = $.map(this.select(), function (item) {
        return grid.dataItem(item);
    });
    var apiUrl = "http://localhost:50090/api/Fortnite/Heroes/" + selected[0].Id;
    var dsHero = new kendo.data.DataSource({
        autoSync: true,
        transport: {
            read: { dataType: "json", type: "get", url: apiUrl }
        },
        schema: { data: "Skills", model: skillModel }
    });
    $("#pnlGrid").kendoGrid({
        dataSource: dsHero,
        columns: [
            { width: 80, field: "id", title: " ", hidden: true },
            { width: 80, field: "name", title: "Skill" },
            { width: 80, field: "description", title: "Description" }
        ],
        dataBound: function (e) {
            var rows = e.sender.tbody.children();
            for (var j = 0; j < rows.length; j++) {
                var row = $(rows[j]);
                var dataItem = e.sender.dataItem(row);
                var isTactical = dataItem.get("istactical");
                if (isTactical) {
                    row.addClass("row-tactical");
                }
            }
        },
        height: 500
    });
}
</script>
}
